{
  
    
        "post0": {
            "title": "dic(dictionary)",
            "content": "&gt; &quot;빅데이터 교육&quot; - toc:true - branch: master - badges: true - comments: true - author: Doo - categories: [fastpages, jupyter] . # - 의사결정을 위한 데이터 인사이트 발굴 # - 큰 수의 법칙 : 데이터 수가 많아지면 우리가 원하는 확률에 근접하게 됩니다. # 데이터 분석 도구 : Python, R # 파이썬으로 영상 편집?? . x = 3 y = 7 print(x+y) . 10 . type(x) . int . z = &#39;10&#39; . z + z . &#39;1010&#39; . # float # string - str . float . int(z) + int(z) . 20 . # colab - 구글에서 개발한, jupyter notebook과 유사한 서비스 # python - 설치 후power shell에서 python 파일명.py로 실행가능 . &#39;3&#39; . name = &#39;doo&#39; age = 26 print(&#39;제 이름은&#39;, name,&#39;이고&#39;, &#39;나이는&#39;, age,&#39;입니다.&#39;) . 제 이름은 doo 이고 나이는 26 입니다. . print(&#39;제 이름은 &#39; + name + &#39;이고&#39; + &#39; 나이는 &#39; + str(age) +&#39;입니다.&#39;) . 제 이름은 doo이고 나이는 26입니다. . . print(&#39;제 이름은 {}이고 제 나이는 {}입니다&#39;. format(name, age)) . 제 이름은 doo이고 제 나이는 26입니다 . print(f&#39;제 이름은 {name}이고 제 나이는 {age}입니다.&#39;) . 제 이름은 doo이고 제 나이는 26입니다. . # +, - , /, *, **, % print(x - y) print(x + y) print(y / x) # float print(y // x) # int print(x * y) print(y ** x) # 승수 print(y % x) # ㄴㅏㅁㅓㅈㅣ . -4 10 2.3333333333333335 2 21 343 1 . x = 3 #x = x + 5 x += 7 print(x) . 10 . # &gt;, &lt; , =, =&gt; =&lt;, x = 3 y = 7 print( x &gt; y) . False . x = True # 1 y = False # 0 print(x and y) print(x or y) print(not y) . False True True . s = 0 for i in range(20): if i % 3 == 0 or i % 5 == 0: print(i) s += i s . 0 3 5 6 9 10 12 15 18 . 78 . w = &#39;paullab ceo&#39; print(type(w)) print(dir(w)) # 사용가능한 매서드 목록/ 정규표현식 . &lt;class &#39;str&#39;&gt; [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;] . w.count(&#39;l&#39;) # 컨트롤 + / -&gt; 주석처리 w.find(&#39;c&#39;) # find는 없는 값을 만나면 -1을 출력 w.index(&#39;c&#39;) # 없는 값을 만나면 error 출력 # w.format(name,age) -&gt; 위에 썼던 부분 &#39;-&#39;.join([&#39;010&#39;,&#39;5044&#39;,&#39;2903&#39;]) . &#39;010-5044-2903&#39; . w.replace(&#39;ceo&#39;, &#39;CEO&#39;) . &#39;paullab CEO&#39; . w.split(&#39; &#39;) . [&#39;paullab&#39;, &#39;ceo&#39;] . &#39;연도, 제조사, 모델, 설명, 가격&#39;.split(&#39;,&#39;) . [&#39;연도&#39;, &#39; 제조사&#39;, &#39; 모델&#39;, &#39; 설명&#39;, &#39; 가격&#39;] . w.upper() # lower 대문자 소문자 전환, 중복확인하고자 쓰인다고 함. &#39;1001&#39;.zfill(10) . &#39;0000001001&#39; . # #s[start:stop:step] step은 how 2 -&gt; 2의배수 -1 -&gt; 역순 w = &#39;paullab CEO&#39; w[0] # 0 -&gt; index 위치, indexing 호출 w[3:7] # slicing . &#39;llab&#39; . # mark down .mds -&gt; mark up -. html -&gt; 웹페이지 . array . hello world . 순서가 있는 데이터집합 수정이 가능한 데이터 집합 . 순회가 가능한 데이터 집합* | . a = [10,20,30,40] . print(type(a)) print(dir(a)) . &lt;class &#39;list&#39;&gt; [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] . # &#39;clear&#39; # &#39;copy&#39; # &#39;count&#39; # &#39;extend&#39; # &#39;index&#39; # &#39;insert&#39; # &#39;pop&#39; # &#39;remove&#39; # &#39;reverse&#39; # &#39;sort&#39; . a.append(100) . a . [10, 20, 30, 40, 100, 100] . a.count(100) . 2 . a.index(40) . 3 . a.pop() a . [10, 20, 30, 40] . a.reverse() a . [40, 30, 20, 10] . a.sort() a . [10, 20, 30, 40] . # 데이터 분석에서 보통 sorted(x)를 사용 x = [ 1, 5, 2, 4, 7, 8] sorted(x) . [1, 2, 4, 5, 7, 8] . list(reversed(x)) # 형변환 필요 generator . [8, 7, 4, 2, 5, 1] . x = [10, 20, 30] x[1] = 15 x . [10, 15, 30] . s = &#39;hello world&#39; s[0] = &#39;k&#39; s . TypeError Traceback (most recent call last) &lt;ipython-input-136-2b1c16f71298&gt; in &lt;module&gt;() 1 s = &#39;hello world&#39; -&gt; 2 s[0] = &#39;k&#39; 3 s TypeError: &#39;str&#39; object does not support item assignment . # range(start, stop, step) list(range(10)) list(range(5,10,2)) list(range(10, 6, -1)) . [10, 9, 8, 7] . # 000X # 00X0 # 0X00 # X000 . str(list(range(10000))).count(&#39;8&#39;) . 4000 . d = {&#39;one&#39;:1, &#39;two&#39;:2} d . {&#39;one&#39;: 1, &#39;two&#39;: 2} . d[&#39;one&#39;] . 1 . d[&#39;one&#39;] = 1 . dir(d) . # d.items() # d.keys() d.values() . [1, 2] . tuple . 순서가 있고 변경 불가능한 자료형 | . t = (10, 20, 30) t[0] # t[10] = 1 -&gt; 불가능 . 10 . if 10 &gt; 5 : print(&#39;hello&#39;) . hello . score = 89 wage = 10000 if score &gt; 90: wage += 30000 print(&#39;엄마 : 대단해!&#39;) elif score &gt; 80: wage += 20000 print(&#39;엄마 : 오!&#39;) elif score &gt; 80: wage += 10000 print(&#39;엄마 : 오!&#39;) elif score &gt; 80: wage += 5000 print(&#39;엄마 : 오!&#39;) else: print(&#39;....&#39;) print(wage) . 엄마 : 오! 30000 . for i in range(10): print(i) print(&#39;hello&#39;) print(&#39;end&#39;) # 반복문 for i in &#39;hello&#39;: print(i) print(&#39;hello&#39;) print(&#39;end&#39;) # 반복문 for i in [10,20,30]: print(i) print(&#39;hello&#39;) print(&#39;end&#39;) # 반복문 for i in {&#39;one&#39;:1,&#39;two&#39;:2,&#39;three&#39;:3}: print(i) print(&#39;hello&#39;) print(&#39;end&#39;) . s = 0 for i in range(0,101,2): s += i s . 2550 . x = 0 while x &lt; 10: print(x) x += 1 # 반복 중단 -&gt; break #어떤 값을 순회할 땐 for # true 조건을 맞족할 때 까지 . s = [10, 20, 30] while s: print(s.pop()) . 30 20 10 . . &#54632;&#49688;&#50752; &#53364;&#47000;&#49828; &#47784;&#46280; . 파라미터는 선언 아규먼트 실행. | 함수를 사용하는 이유? 구조 파악에 용이 | 재사용 | 유지보수 | | . def add(x,y): #x, y를 파라미터 return x + y add(10,20) # 10과 20을 아규먼트 . 30 . # 땅다지기() # 벽돌쌓기() # 지붕올리기() . def 원넓이(r): return r**2*3.14 원넓이(10) # 함수는 함수안에 코드 덩어리존재 # 함수도 변수 # return 생략 가능 -&gt; 생략시 null . 314.0 . def doo10print(): for i in range(10): print(&#39;이호준&#39;) # return None 생략 return 10 print(doo10print()) . 이호준 이호준 이호준 이호준 이호준 이호준 이호준 이호준 이호준 이호준 10 . # 인스턴스 : 자동차(붕어빵) # 매서드 - 클래스 안 함수 class Car(): maxPeople = 6 #맴버(클래스 변수, 인스턴스 변수) maxSpeed = 300 def start(self): #매서드 print(&#39;출발합니다!&#39;) def stop(self): print(&#39;멈춥니다!&#39;) k5 =Car() k5.maxPeople k5.start() . 출발합니다! . . # 프레임워크 # . import numpy as np . s = 10 . s = [10,20,30,40] d = [10] . s = [[1,2,3,], [4,5,6], [7,8,9]] #인공지능한다면 행렬 공부 필수 . s[0] s[0][0] . 1 . s = [[[1,2,], [3,4]], [[5,6],[7,8]]] . s = [[1,2,3,], [4,5,6], [7,8,9]] for i in range(len(s)): # range(len(s)) for j in range(3): s[i][j]*= 2 print(s) . [[2, 4, 6], [8, 10, 12], [14, 16, 18]] . s = [[1,2,3,], [4,5,6], [7,8,9]] a = np.array(s) a . array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) . a*2 . array([[ 2, 4, 6], [ 8, 10, 12], [14, 16, 18]]) . s*2 . [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]] . a.shape . (3, 3) . len(s) len(s[0]) . 3 . a.ndim . 2 . a.dtype.name . &#39;int64&#39; . . a.size . 9 . type(a) . numpy.ndarray . test = np.arange(15).reshape(3,5) test . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . test = np.arange(160).reshape(2,4,4,5) # 2개 안에 4개 안에 4개 안에 5개. test . np.zeros([3,4]) . array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]) . np.ones([3,4]) . array([[1., 1., 1., 1.], [1., 1., 1., 1.], [1., 1., 1., 1.]]) . np.linspace(0,2,9).reshape(3,3) # 0부터 2까지 9개 . array([[0. , 0.25, 0.5 ], [0.75, 1. , 1.25], [1.5 , 1.75, 2. ]]) . import random random.randint(0,10) . 5 . a = [] for i in range(100): a.append(random.randint(1,6)) . 10 . a.count(6) . 19 . np.random.rand(5) . array([0.28298362, 0.39834636, 0.57441304, 0.97266082, 0.69150468]) . np.random.random((2,3)) . array([[0.90076595, 0.32973666, 0.81798773], [0.95284431, 0.98043845, 0.6712865 ]]) . a = np.arange(15).reshape(3,5) . np.arange(15).reshape(3,5).min() # 파이썬은 해당x . 0 . a.sum() . 105 . a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . a.sum(axis=1) . array([10, 35, 60]) . a.sum(axis=0) . array([15, 18, 21, 24, 27]) . np.floor(10*np.random.rand(2,3)) . array([[3., 0., 8.], [6., 5., 3.]]) . b = np.arange(20).reshape(4,5) . b.T . array([[ 0, 5, 10, 15], [ 1, 6, 11, 16], [ 2, 7, 12, 17], [ 3, 8, 13, 18], [ 4, 9, 14, 19]]) . import numpy as np from skimage import io import matplotlib.pyplot as plt . jeju = io.imread(&#39;jeju.jpg&#39;) . type(jeju) . numpy.ndarray . jeju . array([[[170, 223, 254], [170, 223, 254], [169, 222, 253], ..., [123, 187, 251], [123, 187, 251], [123, 187, 251]], [[170, 223, 254], [170, 223, 254], [170, 223, 254], ..., [123, 187, 251], [123, 187, 251], [123, 187, 251]], [[171, 224, 255], [171, 224, 255], [170, 223, 254], ..., [123, 187, 251], [123, 187, 251], [123, 187, 251]], ..., [[ 60, 80, 21], [ 34, 54, 0], [ 23, 43, 0], ..., [ 13, 38, 0], [ 21, 43, 5], [ 19, 41, 5]], [[ 33, 50, 0], [ 32, 49, 0], [ 47, 65, 5], ..., [ 12, 37, 0], [ 8, 32, 0], [ 7, 31, 0]], [[ 41, 55, 2], [ 51, 66, 11], [ 62, 80, 22], ..., [ 40, 65, 25], [ 29, 53, 17], [ 21, 45, 9]]], dtype=uint8) . jeju.shape . (1440, 1920, 3) . plt.imshow(jeju) . &lt;matplotlib.image.AxesImage at 0x7ff8eccaa1d0&gt; . data = jeju[:] # data = jeju는 원본을 넣는 것 data[::-1] . plt.imshow(data[::-1]) . &lt;matplotlib.image.AxesImage at 0x7ff8e0cd6250&gt; . plt.imshow(data[:,::-1]) #판다스 문법(not 파이선) 행은 그대로 두고 열을 뒤집어라 . &lt;matplotlib.image.AxesImage at 0x7ff8e0cbc790&gt; . plt.imshow(data[800:1200,700:1150]) . &lt;matplotlib.image.AxesImage at 0x7ff8e0b90310&gt; . plt.imshow(data[::30,::30]) . &lt;matplotlib.image.AxesImage at 0x7ff8e0a40c50&gt; . &#54032;&#45796;&#49828; Pandas . import pandas as pd data = pd.read_html(&#39;https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EC%9D%B8%EA%B5%AC&#39;) . data[0] . Unnamed: 0_level_0 2016 2017 2018 2019 2020 . Unnamed: 0_level_1 인구 인구밀도 인구 인구밀도 인구 인구밀도 인구 인구밀도 인구 인구밀도 . 0 계 | 51218 | 510 | 51362 | 512 | 51607 | 514 | 51709 | 515 | 51781 | 516 | . 1 서울 | 9843 | 16263 | 9766 | 16136 | 9705 | 16034 | 9662 | 15964 | 9602 | 15865 | . 2 부산 | 3447 | 4477 | 3424 | 4447 | 3400 | 4416 | 3373 | 4380 | 3344 | 4342 | . 3 대구 | 2461 | 2786 | 2458 | 2782 | 2450 | 2773 | 2432 | 2753 | 2419 | 2738 | . 4 인천 | 2907 | 2736 | 2924 | 2750 | 2939 | 2764 | 2944 | 2769 | 2951 | 2770 | . 5 광주 | 1502 | 2997 | 1495 | 2984 | 1493 | 2980 | 1494 | 2980 | 1488 | 2969 | . 6 대전 | 1536 | 2848 | 1528 | 2832 | 1518 | 2813 | 1509 | 2796 | 1500 | 2780 | . 7 울산 | 1166 | 1099 | 1159 | 1092 | 1154 | 1088 | 1147 | 1080 | 1140 | 1073 | . 8 세종 | 234 | 504 | 266 | 571 | 304 | 653 | 331 | 712 | 349 | 750 | . 9 경기 | 12600 | 1237 | 12786 | 1255 | 13031 | 1279 | 13238 | 1299 | 13405 | 1315 | . 10 강원 | 1521 | 90 | 1521 | 90 | 1521 | 90 | 1517 | 90 | 1515 | 90 | . 11 충북 | 1601 | 216 | 1609 | 217 | 1619 | 219 | 1626 | 219 | 1632 | 220 | . 12 충남 | 2126 | 258 | 2153 | 262 | 2180 | 265 | 2188 | 265 | 2204 | 267 | . 13 전북 | 1835 | 227 | 1829 | 227 | 1820 | 226 | 1803 | 223 | 1792 | 222 | . 14 전남 | 1798 | 146 | 1795 | 146 | 1790 | 145 | 1773 | 144 | 1764 | 143 | . 15 경북 | 2683 | 141 | 2675 | 141 | 2674 | 141 | 2665 | 140 | 2655 | 140 | . 16 경남 | 3338 | 317 | 3339 | 317 | 3356 | 318 | 3350 | 318 | 3350 | 318 | . 17 제주 | 618 | 334 | 635 | 343 | 653 | 353 | 660 | 356 | 670 | 362 | . 18 수도권 | 25350 | 2139 | 25476 | 2149 | 25675 | 2165 | 25844 | 2179 | 25958 | 2188 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 인구수 = data[4] 사망자수 = 인구수[[&#39;사망자수(명)&#39;]] 사망자수 . 사망자수(명) . 0 359042 | . 1 337948 | . 2 353818 | . 3 357701 | . 4 414366 | . ... ... | . 92 285534 | . 93 298820 | . 94 295132 | . 95 304948 | . 96 317773 | . 97 rows × 1 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 사망자수.sum()[0] 사망자수.sum() . 사망자수(명) 28836332 dtype: int64 . format(사망자수.sum()[0], &#39;,&#39;) . &#39;28,836,332&#39; . &#44277;&#49885; &#54856;&#54168;&#51060;&#51648; &#53916;&#53664;&#47532;&#50620; . What kind of data does pandas handle? . &#52636;&#52376; &#44256; . import pandas as pd . # 그러나 실제 데이터는 대부분 csv로 되어있어, dict로 다루실일이 많이 없을거에요. df = pd.DataFrame( { &quot;Name&quot;: [ &quot;Braund, Mr. Owen Harris&quot;, &quot;Allen, Mr. William Henry&quot;, &quot;Bonnell, Miss. Elizabeth&quot;, ], &quot;Age&quot;: [22, 35, 58], &quot;Sex&quot;: [&quot;male&quot;, &quot;male&quot;, &quot;female&quot;], } ) . df . Name Age Sex . 0 Braund, Mr. Owen Harris | 22 | male | . 1 Allen, Mr. William Henry | 35 | male | . 2 Bonnell, Miss. Elizabeth | 58 | female | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; &#49884;&#47532;&#51592;&#45716; &#45936;&#51060;&#53552;&#54532;&#47112;&#51076;&#50640;&#49436; &#54616;&#45208;&#51032; &#52860;&#47100;&#51077;&#45768;&#45796;. . df[&#39;Age&#39;] . 0 22 1 35 2 58 Name: Age, dtype: int64 . type(df[&#39;Age&#39;]) . pandas.core.series.Series . . df[[&#39;Age&#39;]] df[&#39;Age&#39;] . 0 22 1 35 2 58 Name: Age, dtype: int64 . type(df[[&#39;Age&#39;]]) . pandas.core.frame.DataFrame . df.dtypes # 통계전 확인 . Name object Age int64 Sex object dtype: object . Do something with a DataFrame or Series . . df.describe() . Age . count 3.000000 | . mean 38.333333 | . std 18.230012 | . min 22.000000 | . 25% 28.500000 | . 50% 35.000000 | . 75% 46.500000 | . max 58.000000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; How do I read and write tabular data? . titanic = pd.read_csv(&#39;train.csv&#39;) . titanic . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.0000 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.0000 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | . 891 rows × 12 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; titanic.head() #데이터가 너무 많을 때 잘 들어왔는지 확인하는 작업. . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; titanic.tail() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.00 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.00 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.45 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.00 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.75 | NaN | Q | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; titanic.dtypes . PassengerId int64 Survived int64 Pclass int64 Name object Sex object Age float64 SibSp int64 Parch int64 Ticket object Fare float64 Cabin object Embarked object dtype: object . titanic.to_excel(&quot;titanic.xlsx&quot;, sheet_name = &quot;passengers&quot;, index=False) . titanic_read_excel = pd.read_excel(&quot;titanic.xlsx&quot;, sheet_name=&quot;passengers&quot;) titanic_read_excel . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.0000 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.0000 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | . 891 rows × 12 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; titanic.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . . titanic[&quot;Age&quot;].shape . (891,) . titanic[&quot;Sex&quot;].shape . (891,) . titanic[[&quot;Age&quot;,&quot;Sex&quot;]] . Age Sex . 0 22.0 | male | . 1 38.0 | female | . 2 26.0 | female | . 3 35.0 | female | . 4 35.0 | male | . ... ... | ... | . 886 27.0 | male | . 887 19.0 | female | . 888 NaN | female | . 889 26.0 | male | . 890 32.0 | male | . 891 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; type(titanic[[&quot;Age&quot;, &quot;Sex&quot;]]) . pandas.core.frame.DataFrame . titanic[[&quot;Age&quot;, &quot;Sex&quot;]].shape . (891, 2) . How do I filter specific rows from as DataFrame . above_35 = titanic[titanic[&quot;Age&quot;] &gt; 35] above_35.head(10) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. James | male | NaN | 0 | 0 | 330877 | 8.4583 | NaN | Q | . 6 7 | 0 | 1 | McCarthy, Mr. Timothy J | male | 54.0 | 0 | 0 | 17463 | 51.8625 | E46 | S | . 7 8 | 0 | 3 | Palsson, Master. Gosta Leonard | male | 2.0 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 12 13 | 0 | 3 | Saundercock, Mr. William Henry | male | 20.0 | 0 | 0 | A/5. 2151 | 8.0500 | NaN | S | . 13 14 | 0 | 3 | Andersson, Mr. Anders Johan | male | 39.0 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 16 17 | 0 | 3 | Rice, Master. Eugene | male | 2.0 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 17 18 | 1 | 2 | Williams, Mr. Charles Eugene | male | NaN | 0 | 0 | 244373 | 13.0000 | NaN | S | . 20 21 | 0 | 2 | Fynney, Mr. Joseph J | male | 35.0 | 0 | 0 | 239865 | 26.0000 | NaN | S | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Male = titanic[titanic[&quot;Sex&quot;] == &#39;male&#39;] Male.head(10) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. James | male | NaN | 0 | 0 | 330877 | 8.4583 | NaN | Q | . 6 7 | 0 | 1 | McCarthy, Mr. Timothy J | male | 54.0 | 0 | 0 | 17463 | 51.8625 | E46 | S | . 7 8 | 0 | 3 | Palsson, Master. Gosta Leonard | male | 2.0 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 12 13 | 0 | 3 | Saundercock, Mr. William Henry | male | 20.0 | 0 | 0 | A/5. 2151 | 8.0500 | NaN | S | . 13 14 | 0 | 3 | Andersson, Mr. Anders Johan | male | 39.0 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 16 17 | 0 | 3 | Rice, Master. Eugene | male | 2.0 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 17 18 | 1 | 2 | Williams, Mr. Charles Eugene | male | NaN | 0 | 0 | 244373 | 13.0000 | NaN | S | . 20 21 | 0 | 2 | Fynney, Mr. Joseph J | male | 35.0 | 0 | 0 | 239865 | 26.0000 | NaN | S | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Male.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 577 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 577 non-null int64 1 Survived 577 non-null int64 2 Pclass 577 non-null int64 3 Name 577 non-null object 4 Sex 577 non-null object 5 Age 453 non-null float64 6 SibSp 577 non-null int64 7 Parch 577 non-null int64 8 Ticket 577 non-null object 9 Fare 577 non-null float64 10 Cabin 107 non-null object 11 Embarked 577 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 58.6+ KB . titanic[&quot;Age&quot;] &gt; 35 (titanic[&quot;Age&quot;] &gt; 35).sum() . 217 . Male.shape . (577, 12) . titanic.shape . (891, 12) . 891-577 # 이렇게 사용하면 결측치가 있는 경우 제대로 나올 수 없기 때문에 꼭 비어있는 값이 있는지 확인해보가 . 314 . class_23 = titanic[(titanic[&quot;Pclass&quot;] == 2) | (titanic[&quot;Pclass&quot;] == 3)] . 9|4 . 13 . titanic.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . age_no_na = titanic[titanic[&quot;Age&quot;].notna()] age_no_na.shape . (714, 12) . How do I select specific rows and columns from a DataFrame? . adult_names = titanic.loc[titanic[&quot;Age&quot;] &gt; 35, [&quot;Name&quot;,&quot;Sex&quot;]] # loc(조건, 해당 열) adult_names . Name Sex . 1 Cumings, Mrs. John Bradley (Florence Briggs Th... | female | . 6 McCarthy, Mr. Timothy J | male | . 11 Bonnell, Miss. Elizabeth | female | . 13 Andersson, Mr. Anders Johan | male | . 15 Hewlett, Mrs. (Mary D Kingcome) | female | . ... ... | ... | . 865 Bystrom, Mrs. (Karolina) | female | . 871 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) | female | . 873 Vander Cruyssen, Mr. Victor | male | . 879 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) | female | . 885 Rice, Mrs. William (Margaret Norton) | female | . 217 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; titanic.iloc[9:25, 2:5] # 데이터를 믹스하는 경우 사용, . Pclass Name Sex . 9 2 | Nasser, Mrs. Nicholas (Adele Achem) | female | . 10 3 | Sandstrom, Miss. Marguerite Rut | female | . 11 1 | Bonnell, Miss. Elizabeth | female | . 12 3 | Saundercock, Mr. William Henry | male | . 13 3 | Andersson, Mr. Anders Johan | male | . 14 3 | Vestrom, Miss. Hulda Amanda Adolfina | female | . 15 2 | Hewlett, Mrs. (Mary D Kingcome) | female | . 16 3 | Rice, Master. Eugene | male | . 17 2 | Williams, Mr. Charles Eugene | male | . 18 3 | Vander Planke, Mrs. Julius (Emelia Maria Vande... | female | . 19 3 | Masselmani, Mrs. Fatima | female | . 20 2 | Fynney, Mr. Joseph J | male | . 21 2 | Beesley, Mr. Lawrence | male | . 22 3 | McGowan, Miss. Anna &quot;Annie&quot; | female | . 23 1 | Sloper, Mr. William Thompson | male | . 24 3 | Palsson, Miss. Torborg Danira | female | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; &#53356;&#47204;&#47553; &#45936;&#51060;&#53552;&#47196; &#50937;&#54168;&#51060;&#51648; &#47564;&#46308;&#44592; . import pandas as pd #data = pd.read_html(&#39;https://ridibooks.com/category/bestsellers/2200&#39;) #data . import requests from bs4 import BeautifulSoup url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; #수정 response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) bookservices = soup.select(&#39;.title_text&#39;) #수정 for no, book in enumerate(bookservices, 1): print(no, book.text.strip()) . 1 구글 엔지니어는 이렇게 일한다 2 면접을 위한 CS 전공지식 노트 3 도메인 주도 개발 시작하기 4 개정판｜헤드 퍼스트 디자인 패턴 5 프로그래머의 뇌 6 개정판｜혼자 공부하는 파이썬 7 똑똑한 코드 작성을 위한 실전 알고리즘 8 프로그래머가 알아야 할 알고리즘 40 9 전길남, 연결의 탄생 10 비전공자를 위한 이해할 수 있는 IT 지식 11 적정 소프트웨어 아키텍처 12 이것이 취업을 위한 코딩 테스트다 with 파이썬 13 소문난 명강의_소플의 처음 만난 리액트 14 쉽고 빠른 플러터 앱 개발 15 동시성 프로그래밍 16 유연한 소프트웨어를 만드는 설계 원칙 17 빅데이터 시대, 성과를 이끌어 내는 데이터 문해력 18 Do it! 쉽게 배우는 파이썬 데이터 분석 19 객체지향의 사실과 오해 20 혼자 공부하는 머신러닝+딥러닝 . import requests from bs4 import BeautifulSoup url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; #수정 response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) bookservices = soup.select(&#39;.thumbnail&#39;) #수정 for no, book in enumerate(bookservices, 1): print(no, book[&#39;alt&#39;], &#39;https:&#39; + book[&#39;data-src&#39;]) . 1 구글 엔지니어는 이렇게 일한다 https://img.ridicdn.net/cover/443001038/large#1 2 면접을 위한 CS 전공지식 노트 https://img.ridicdn.net/cover/754034561/large#1 3 도메인 주도 개발 시작하기 https://img.ridicdn.net/cover/443001019/large#1 4 개정판｜헤드 퍼스트 디자인 패턴 https://img.ridicdn.net/cover/443001018/large#1 5 프로그래머의 뇌 https://img.ridicdn.net/cover/852001285/large#1 6 개정판｜혼자 공부하는 파이썬 https://img.ridicdn.net/cover/443001043/large#1 7 똑똑한 코드 작성을 위한 실전 알고리즘 https://img.ridicdn.net/cover/443001042/large#1 8 프로그래머가 알아야 할 알고리즘 40 https://img.ridicdn.net/cover/754034732/large#1 9 전길남, 연결의 탄생 https://img.ridicdn.net/cover/1546000957/large#1 10 비전공자를 위한 이해할 수 있는 IT 지식 https://img.ridicdn.net/cover/4489000001/large#1 11 적정 소프트웨어 아키텍처 https://img.ridicdn.net/cover/443001041/large#1 12 이것이 취업을 위한 코딩 테스트다 with 파이썬 https://img.ridicdn.net/cover/443000825/large#1 13 소문난 명강의_소플의 처음 만난 리액트 https://img.ridicdn.net/cover/443001044/large#1 14 쉽고 빠른 플러터 앱 개발 https://img.ridicdn.net/cover/3780000151/large#1 15 동시성 프로그래밍 https://img.ridicdn.net/cover/443001024/large#1 16 유연한 소프트웨어를 만드는 설계 원칙 https://img.ridicdn.net/cover/443001020/large#1 17 빅데이터 시대, 성과를 이끌어 내는 데이터 문해력 https://img.ridicdn.net/cover/3903000029/large#1 18 Do it! 쉽게 배우는 파이썬 데이터 분석 https://img.ridicdn.net/cover/754034726/large#1 19 객체지향의 사실과 오해 https://img.ridicdn.net/cover/1160000033/large#1 20 혼자 공부하는 머신러닝+딥러닝 https://img.ridicdn.net/cover/443000859/large#1 . import requests from bs4 import BeautifulSoup url = &#39;https://search.naver.com/search.naver?where=nexearch&amp;sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=%EB%B0%95%EC%8A%A4%EC%98%A4%ED%94%BC%EC%8A%A4&#39; #수정 response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) bookservices = soup.select(&#39;.name&#39;) #수정 for no, book in enumerate(bookservices, 1): print(no, book.text.strip()) . 1 범죄도시2 2 쥬라기 월드: 도미니언 3 극장판 포켓몬스터DP: 기라... 4 그대가 조국 5 닥터 스트레인지: 대혼돈의 ... 6 카시오페아 7 애프터 양 8 특수요원 빼꼼 9 뜨거운 피: 디 오리지널 10 아치의 노래, 정태춘 11 우연과 상상 12 피는 물보다 진하다 13 킹메이커 14 나를 만나는 길 15 오마주 16 초록물고기 17 올리 마키의 가장 행복한 날 18 더 노비스 19 매스 20 몬스터 싱어: 매직 인 파리 21 봉명주공 22 극장판 주술회전 0 23 배드 가이즈 24 파리, 13구 25 극장판 엉덩이 탐정: 수플레... 26 괴물, 유령, 자유인 27 광대: 소리꾼 28 플레이그라운드 29 안녕하세요 30 리골레토 31 그대가 조국 32 아치의 노래, 정태춘 33 범죄도시2 34 극장판 주술회전 0 35 광대: 소리꾼 36 카시오페아 37 우연과 상상 38 매스 39 안녕하세요 40 배드 가이즈 41 킹메이커 42 오마주 43 애프터 양 44 닥터 스트레인지: 대혼돈의 ... 45 플레이그라운드 46 나를 만나는 길 47 극장판 포켓몬스터DP: 기라... 48 파리, 13구 49 더 노비스 50 쥬라기 월드: 도미니언 51 극장판 엉덩이 탐정: 수플레... 52 리쓰남 53 리쓰남 54 비됴알바 55 비됴알바 56 청우 57 청우 58 그루터기그루터기그루터기그루터... 59 그루터기그루터기그루터기그루터... . import requests from bs4 import BeautifulSoup url = &#39;https://ridibooks.com/category/bestsellers/2200&#39; #수정 response = requests.get(url) response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) 책순위 = [] 책이름 = [] 책이미지 = [] bookservices = soup.select(&#39;.thumbnail&#39;) #수정 for no, book in enumerate(bookservices, 1): 책순위.append(no) 책이름.append(book[&#39;alt&#39;]) 책이미지.append(&#39;https:&#39; + book[&#39;data-src&#39;]) . df = pd.DataFrame({ &#39;책순위&#39; : 책순위, &#39;책이름&#39; : 책이름, &#39;책이미지&#39; : 책이미지 }) df . 책순위 책이름 책이미지 . 0 1 | 구글 엔지니어는 이렇게 일한다 | https://img.ridicdn.net/cover/443001038/large#1 | . 1 2 | 면접을 위한 CS 전공지식 노트 | https://img.ridicdn.net/cover/754034561/large#1 | . 2 3 | 도메인 주도 개발 시작하기 | https://img.ridicdn.net/cover/443001019/large#1 | . 3 4 | 개정판｜헤드 퍼스트 디자인 패턴 | https://img.ridicdn.net/cover/443001018/large#1 | . 4 5 | 프로그래머의 뇌 | https://img.ridicdn.net/cover/852001285/large#1 | . 5 6 | 개정판｜혼자 공부하는 파이썬 | https://img.ridicdn.net/cover/443001043/large#1 | . 6 7 | 똑똑한 코드 작성을 위한 실전 알고리즘 | https://img.ridicdn.net/cover/443001042/large#1 | . 7 8 | 프로그래머가 알아야 할 알고리즘 40 | https://img.ridicdn.net/cover/754034732/large#1 | . 8 9 | 전길남, 연결의 탄생 | https://img.ridicdn.net/cover/1546000957/large#1 | . 9 10 | 비전공자를 위한 이해할 수 있는 IT 지식 | https://img.ridicdn.net/cover/4489000001/large#1 | . 10 11 | 적정 소프트웨어 아키텍처 | https://img.ridicdn.net/cover/443001041/large#1 | . 11 12 | 이것이 취업을 위한 코딩 테스트다 with 파이썬 | https://img.ridicdn.net/cover/443000825/large#1 | . 12 13 | 소문난 명강의_소플의 처음 만난 리액트 | https://img.ridicdn.net/cover/443001044/large#1 | . 13 14 | 쉽고 빠른 플러터 앱 개발 | https://img.ridicdn.net/cover/3780000151/large#1 | . 14 15 | 동시성 프로그래밍 | https://img.ridicdn.net/cover/443001024/large#1 | . 15 16 | 유연한 소프트웨어를 만드는 설계 원칙 | https://img.ridicdn.net/cover/443001020/large#1 | . 16 17 | 빅데이터 시대, 성과를 이끌어 내는 데이터 문해력 | https://img.ridicdn.net/cover/3903000029/large#1 | . 17 18 | Do it! 쉽게 배우는 파이썬 데이터 분석 | https://img.ridicdn.net/cover/754034726/large#1 | . 18 19 | 객체지향의 사실과 오해 | https://img.ridicdn.net/cover/1160000033/large#1 | . 19 20 | 혼자 공부하는 머신러닝+딥러닝 | https://img.ridicdn.net/cover/443000859/large#1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.to_html(&#39;index.html&#39;) . def 이미지변환(path): return f&#39;&lt;img src=&quot;{path}&quot; width=&quot;60&quot; &gt;&#39; # img src -&gt; 이미지 df.to_html(&#39;index.html&#39;, escape=False, formatters=dict(책이미지=이미지변환)) . How to create plots in pandas? . import numpy as np import pandas as pd import matplotlib.pyplot as plt # seaborn라이브러리, . df = pd.read_csv(&quot;train.csv&quot;) . df[[&#39;SibSp&#39;, &#39;Parch&#39;]].plot() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9484efaa10&gt; . df.columns . Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=&#39;object&#39;) . df.plot.scatter(x=&quot;Age&quot;, y=&quot;Fare&quot;, alpha=0.5) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9484916250&gt; . df[[&#39;Age&#39;]].plot.box() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f94848d8a50&gt; . how to create new columns derived from existing columns? . df[&#39;Family&#39;] = 1 + df[&#39;SibSp&#39;] + df[&#39;Parch&#39;] df . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Family . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 2 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.0000 | NaN | S | 1 | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.0000 | B42 | S | 1 | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | 4 | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.0000 | C148 | C | 1 | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.7500 | NaN | Q | 1 | . 891 rows × 13 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; How to calculate summary statistics? . import pandas as pd . df = pd.read_csv(&#39;train.csv&#39;) df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df[[&#39;Age&#39;, &#39;Fare&#39;]].describe() . Age Fare . count 714.000000 | 891.000000 | . mean 29.699118 | 32.204208 | . std 14.526497 | 49.693429 | . min 0.420000 | 0.000000 | . 25% 20.125000 | 7.910400 | . 50% 28.000000 | 14.454200 | . 75% 38.000000 | 31.000000 | . max 80.000000 | 512.329200 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Aggregating statistics grouped by category . df[[&#39;Sex&#39;,&#39;Age&#39;]].groupby(&#39;Sex&#39;).mean() . Age . Sex . female 27.915709 | . male 30.726645 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df.groupby(&#39;Sex&#39;)[&#39;Age&#39;].mean() . Sex female 27.915709 male 30.726645 Name: Age, dtype: float64 . . df.groupby([&#39;Sex&#39;, &#39;Pclass&#39;])[&#39;Fare&#39;].mean() . Sex Pclass female 1 106.125798 2 21.970121 3 16.118810 male 1 67.226127 2 19.741782 3 12.661633 Name: Fare, dtype: float64 . Count number of records by category . df[&#39;Pclass&#39;].value_counts() . 3 491 1 216 2 184 Name: Pclass, dtype: int64 . df[&#39;Sex&#39;].value_counts() . male 577 female 314 Name: Sex, dtype: int64 . How to reshape the layout of tables? . df.sort_values(by=&#39;Age&#39;).head() . df.sort_values(by=[&#39;Pclass&#39;,&#39;Age&#39;],ascending=False).head() . Female = df[df[&#39;Sex&#39;]==&#39;female&#39;] Female.head() . Female.sort_index().groupby([&quot;Age&quot;]).head(5) Female.sort_index(ascending=False).groupby([&quot;Age&quot;]).head(5) Female[::-1] Female[:] . Female.pivot(index=&quot;PassengerId&quot;, columns=&quot;Pclass&quot;, values=&quot;Fare&quot;) # 데이터 재구조화 . Pclass 1 2 3 . PassengerId . 2 71.2833 | NaN | NaN | . 3 NaN | NaN | 7.9250 | . 4 53.1000 | NaN | NaN | . 9 NaN | NaN | 11.1333 | . 10 NaN | 30.0708 | NaN | . ... ... | ... | ... | . 881 NaN | 26.0000 | NaN | . 883 NaN | NaN | 10.5167 | . 886 NaN | NaN | 29.1250 | . 888 30.0000 | NaN | NaN | . 889 NaN | NaN | 23.4500 | . 314 rows × 3 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; How to combine data from multiple tables? . data = { &#39;수학&#39; : [90, 80], &#39;영어&#39; : [70, 60] } data2 = { &#39;언어&#39; : [20, 70], &#39;과학&#39; : [30, 60] } data3 = { &#39;수학&#39; : [100, 90], &#39;영어&#39; : [85, 65] } . data = pd.DataFrame(data) data2 = pd.DataFrame(data2) data3 = pd.DataFrame(data3) . data . 수학 영어 . 0 90 | 70 | . 1 80 | 60 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; data[&#39;언어&#39;] = data2[&#39;언어&#39;] data[&#39;과학&#39;] = data2[&#39;과학&#39;] # data[[&#39;언어&#39;, &#39;과학&#39;]] = data2[[&#39;언어&#39;, &#39;과학&#39;]] . pd.concat([data,data2], axis=0) #0은 행 아래 1은 열 옆에 . Join tables using a common identifier . data = { &#39;이름&#39; : [&#39;영희&#39;, &#39;철수&#39;, &#39;호준&#39;], &#39;수학&#39; : [70, 60, 90] } data2 = { &#39;이름&#39; : [&#39;영희&#39;, &#39;호준&#39;], &#39;과학&#39; : [50, 70], &#39;언어&#39; : [90, 60] } . data = pd.DataFrame(data) data2 = pd.DataFrame(data2) . 합치기 = pd.merge(data,data2, how=&#39;left&#39;,on=&#39;이름&#39;) . 합치기 . 이름 수학 과학 언어 . 0 영희 | 70 | 50.0 | 90.0 | . 1 철수 | 60 | NaN | NaN | . 2 호준 | 90 | 70.0 | 60.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df = pd.DataFrame({ &#39;year&#39;:[2021,2021], &#39;month&#39;:[7,7], &#39;day&#39;:[9,10] }) . df . year month day . 0 2021 | 7 | 9 | . 1 2021 | 7 | 10 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; data = pd.to_datetime(df) . data . 0 2021-07-09 1 2021-07-10 dtype: datetime64[ns] . data.dt.year . 0 2021 1 2021 dtype: int64 . data.dt.day . 0 9 1 10 dtype: int64 . data.dt.weekday . 0 4 1 5 dtype: int64 . data.dt.day_name() . 0 Friday 1 Saturday dtype: object . pd.to_datetime(&#39;now&#39;) . Timestamp(&#39;2022-06-05 08:43:21.872580&#39;) . How to manipulate textual data . df = pd.read_csv(&#39;train.csv&#39;) df.head() . df[&quot;Name&quot;].str.lower() df[&quot;Name&quot;].str.split(&quot;,&quot;) df[&quot;Name&quot;].str.contains(&quot;Mr&quot;) df[&quot;Name&quot;].str.contains(&quot;Mr&quot;).value_counts() df[df[&quot;Name&quot;].str.contains(&quot;Mr&quot;)] df[&quot;Sex&quot;].replace({&quot;male&quot;: 1, &quot;female&quot;: 0}) . 0 [Braund, Mr. Owen Harris] 1 [Cumings, Mrs. John Bradley (Florence Briggs ... 2 [Heikkinen, Miss. Laina] 3 [Futrelle, Mrs. Jacques Heath (Lily May Peel)] 4 [Allen, Mr. William Henry] ... 886 [Montvila, Rev. Juozas] 887 [Graham, Miss. Margaret Edith] 888 [Johnston, Miss. Catherine Helen &#34;Carrie&#34;] 889 [Behr, Mr. Karl Howell] 890 [Dooley, Mr. Patrick] Name: Name, Length: 891, dtype: object .",
            "url": "https://doo-1t.github.io/dooit/2022/07/02/GREAT%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B5%90%EC%9C%A1.html",
            "relUrl": "/2022/07/02/GREAT%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B5%90%EC%9C%A1.html",
            "date": " • Jul 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://doo-1t.github.io/dooit/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://doo-1t.github.io/dooit/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://doo-1t.github.io/dooit/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://doo-1t.github.io/dooit/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}